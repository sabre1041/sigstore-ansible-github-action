# Copyright 2022 The Sigstore Authors
# Copyright 2023 Maya Costantini <mcostant@redhat.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "sigstore-ansible-github-action"
author: "Sigstore Authors <sigstore-dev@googlegroups.com>"
description: "Use ansible-sign to sign Ansible projects with Sigstore"
inputs:
  project_path:
    description: "the path of the project to sign or verify"
    required: true
    default: "."
  identity-token:
    description: "the OIDC identity token to use"
    required: false
    default: ""
  oidc-client-id:
    description: "the custom OpenID Connect client ID to use during OAuth2"
    required: false
    default: ""
  oidc-client-secret:
    description: "the custom OpenID Connect client secret to use during OAuth2"
    required: false
    default: ""
  fulcio-url:
    description: "the Fulcio instance to use (conflicts with `staging`)"
    required: false
    default: ""
  rekor-url:
    description: "the Rekor instance to use (conflicts with `staging`)"
    required: false
    default: ""
  ctfe:
    description: "a PEM-encoded public key for the CT log (conflicts with `staging`)"
    required: false
    default: ""
  rekor-root-pubkey:
    description: "a PEM-encoded root public key for Rekor itself (conflicts with `staging`)"
    required: false
    default: ""
  staging:
    description: "use sigstore's staging instances, instead of the default production instances"
    required: false
    default: false
  verify:
    description: "verify the generated signatures after signing"
    required: false
    default: false
  verify-cert-identity:
    description: |
      verify the identity in the signing certificate's Subject Alternative Name

      required if `verify` is enabled; has no effect otherwise.
    required: false
    default: ""
  verify-oidc-issuer:
    description: |
      verify the issuer extension of the signing certificate

      required if `verify` is enabled; has no effect otherwise.
    required: false
    default: ""
  verify-certificate-chain:
    description: PEM encoded to a list of CA certificates when building the Fulcio signing certificate
    required: false
    default: ""
  internal-be-careful-debug:
    description: "run with debug logs (default false)"
    required: false
    default: false
  install-ansible-sign:
    description: "installs ansible-sign CLI"
    required: false
    default: 'true'
  push-artifacts:
    description: "push the signed artifacts to the project repository"
    required: false
    default: 'true'
runs:
  using: "composite"
  steps:
    - name: Set up ansible-sign
      if: ${{ inputs.install-ansible-sign != 'false' }}
      run: |
        # NOTE: Sourced, not executed as a script.
        source "${{ github.action_path }}/setup/setup.bash"
      shell: bash

    - name: Run ansible-sign
      id: ansible-sign
      run: |
        ${{ github.action_path }}/action.py "${{ inputs.project_path }}"
      env:
        GHA_SIGSTORE_PYTHON_IDENTITY_TOKEN: "${{ inputs.identity-token }}"
        GHA_SIGSTORE_PYTHON_OIDC_CLIENT_ID: "${{ inputs.oidc-client-id }}"
        GHA_SIGSTORE_PYTHON_OIDC_CLIENT_SECRET: "${{ inputs.oidc-client-secret }}"
        GHA_SIGSTORE_PYTHON_FULCIO_URL: "${{ inputs.fulcio-url }}"
        GHA_SIGSTORE_PYTHON_REKOR_URL: "${{ inputs.rekor-url }}"
        GHA_SIGSTORE_PYTHON_CTFE: "${{ inputs.ctfe }}"
        GHA_SIGSTORE_PYTHON_REKOR_ROOT_PUBKEY: "${{ inputs.rekor-root-pubkey }}"
        GHA_SIGSTORE_PYTHON_STAGING: "${{ inputs.staging }}"
        GHA_SIGSTORE_PYTHON_VERIFY: "${{ inputs.verify }}"
        GHA_SIGSTORE_PYTHON_VERIFY_CERT_IDENTITY: "${{ inputs.verify-cert-identity }}"
        GHA_SIGSTORE_PYTHON_VERIFY_OIDC_ISSUER: "${{ inputs.verify-oidc-issuer }}"
        GHA_SIGSTORE_PYTHON_VERIFY_CERTIFICATE_CHAIN: "${{ inputs.verify-certificate-chain }}"
        GHA_SIGSTORE_PYTHON_INTERNAL_BE_CAREFUL_DEBUG: "${{ inputs.internal-be-careful-debug }}"
      shell: bash

    - name: Upload signature artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ansible-sign-artifacts-${{ github.job }}
        path: ${{ inputs.project_path }}/.ansible-sign/*

    - name: Download signature artifacts
      uses: actions/download-artifact@v3
      with:
        name: ansible-sign-artifacts-${{ github.job }}
        path: ${{ inputs.project_path }}/.ansible-sign/

    - name: Verify signature artifacts are present in the project
      run: |
        [[ -f ./.ansible-sign/sha256sum.txt ]] || exit 1
        [[ -f ./.ansible-sign/sha256sum.txt.sigstore ]] || exit 1
      shell: bash
      working-directory: ${{ inputs.project_path }}

    - name: Get current date
      id: get-date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
      if: ${{ inputs.push-artifacts != 'false' }}
      shell: bash

    # See: https://github.com/stefanzweifel/git-auto-commit-action/issues/229#issuecomment-1177711418
    - name: Pull Remote Changes
      run: git pull
      shell: bash
      if: ${{ inputs.push-artifacts != 'false' }}
      working-directory: ${{ inputs.project_path }}

    - name: Commit changes
      uses: stefanzweifel/git-auto-commit-action@v4
      id: commit
      if: ${{ inputs.push-artifacts != 'false' }}
      with:
        commit_message: "Sign project with ansible-sign (generated by ${{ github.job }} at ${{ steps.get-date.outputs.date }})"
        repository: ${{ inputs.project_path }}
